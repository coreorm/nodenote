{"name":"Nodenote","tagline":" IOS style internal notification system for managing multithreaded (or in reality, async) calls","body":"# nodenote\r\n IOS style internal notification system for managing multithreaded (or in reality, async) calls\r\n\r\n## the idea:\r\nDeclutter the callback codes and make it easy to logically and systematically arrange your callbacks. See the codes below:\r\n  \r\nBefore:\r\n```\r\nFoo.bar(function(result1) {\r\n  doSomething(result1).on('finish', function(result2) {\r\n    do2ndThing(result2).on('finish', function(result3) {\r\n      do3rdThing(result3, ...);\r\n      ...\r\n    });\r\n  });\r\n});\r\n```\r\n\r\nAfter:\r\n```\r\nvar note = require('nodenote');\r\n\r\nFoo.bar(function(result1) {\r\n    note.sendNotification('result1Received', result1);  \r\n});\r\n\r\nnote.addObserver('result1Received', function(note) {\r\n    var result1 = note.object;\r\n    // do something\r\n}); \r\n```\r\n\r\n## unit test\r\n```\r\nnpm install -g mocha\r\n```\r\nthen go to tests/\r\n```\r\nmocha\r\n```\r\n\r\n## example:\r\nSee https://github.com/coreorm/nodenote-example\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}